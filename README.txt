ProcessCommand Function:
  -> The function interprets and executes user commands. It begins by tokenizing the input command into individual words or tokens, which are then analyzed to determine the nature of the command. This function handles various scenarios, including empty commands, exit commands, and conditional execution based on the outcome of the previous command. It also manages wildcard expansion, dynamically adapting the command tokens to match filenames and other patterns in the file system. The function intelligently identifies and separates piping and redirection elements within the command. For commands involving pipes, it delegates the execution to createAndExecutePipe or createAndExecutePipeWithRedirection, depending on whether output redirection is also involved. For commands without pipes, it handles potential redirections and executes either built-in commands (like `cd`, `pwd`, `which`) or external commands. The function also carefully manages memory, particularly for dynamically allocated tokens, ensuring robust and leak-free execution. In essence, `processCommand` acts as the command interpreter and executor, translating user input into actions and delegating complex tasks to specialized sub-functions within the shell program.

ExpandWildcards Function:
  -> This function plays a crucial role in handling wildcard characters, such as `*`, in command inputs. It scans the command tokens and, upon encountering a token containing a wildcard, utilizes the `glob` function to match this pattern with existing file paths. For each match found, the function dynamically allocates memory to store these file paths, effectively replacing the wildcard token with a list of actual filenames or directories. Tokens without wildcards remain unaffected. This mechanism allows your shell to interpret and expand wildcard patterns, thereby enabling users to execute commands on multiple files or directories simultaneously, enhancing the shell's flexibility and ease of use.

